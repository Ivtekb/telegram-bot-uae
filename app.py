import os
import json
import re
from datetime import datetime
import pytz
from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8074002738:AAGNAAHE9sdUDRl7EVwLGYYPrnZK48cxBf4"
ADMIN_ID = 367380234
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_sessions = {}
user_profiles = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATES = {
    'LANGUAGE_SELECT': 'language_select',
    'ROLE_SELECT': 'role_select',
    'BUDGET_INPUT': 'budget_input',
    'PRIORITY_SELECT': 'priority_select',
    'HORIZON_SELECT': 'horizon_select',
    'PROFILE_CONFIRM': 'profile_confirm',
    'CONTACT_CHANNEL': 'contact_channel',
    'PHONE_INPUT': 'phone_input',
    'EMAIL_INPUT': 'email_input',
    'TG_INPUT': 'tg_input',
    'CONTACT_CONFIRM': 'contact_confirm',
    'READY': 'ready'
}

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    url = f"{TELEGRAM_API_URL}/sendMessage"
    
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    if reply_markup:
        payload['reply_markup'] = reply_markup
    
    print(f"Sending to {chat_id}: {text[:50]}...")
    response = requests.post(url, json=payload)
    print(f"Response: {response.status_code}")
    return response

def create_reply_keyboard(buttons, one_time=True):
    """–°–æ–∑–¥–∞–Ω–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    return {
        'keyboard': buttons,
        'resize_keyboard': True,
        'one_time_keyboard': one_time
    }

def remove_keyboard():
    """–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return {'remove_keyboard': True}

def validate_budget(text):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç"""
    return text.strip() if text.strip() else None

def validate_phone(text):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    pattern = r'^\+?\d{9,15}$'
    return re.match(pattern, text.replace(' ', '').replace('-', ''))

def validate_email(text):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
    pattern = r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    return re.match(pattern, text)

def validate_telegram(text):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username"""
    pattern = r'^@[A-Za-z0-9_]{5,32}$'
    return re.match(pattern, text)

def get_ai_recommendations(profile):
    """AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        budget = profile.get('budget', '').lower()
        priority = profile.get('priority_mood', '')
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –±—é–¥–∂–µ—Ç—É
        if any(x in budget for x in ['1m', '2m', '1-2', '2-3']):
            recommendations.append("üìç <b>JVC, Dubai Sports City</b> - –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è")
            recommendations.append("üìç <b>Dubai Marina (—Å—Ç—É–¥–∏–∏)</b> - –≥–æ—Ä–æ–¥—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è")
        elif any(x in budget for x in ['3m', '4m', '5m', '3-4', '4-5']):
            recommendations.append("üìç <b>Palm Jumeirah (–≤–æ—Å—Ç–æ—á–Ω–∞—è –¥—É–≥–∞)</b> - —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç + –≤–æ–¥–∞")
            recommendations.append("üìç <b>Dubai Marina (1-2BR)</b> - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
            recommendations.append("üìç <b>Business Bay</b> - –¥–∏–Ω–∞–º–∏–∫–∞ + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
        else:
            recommendations.append("üìç <b>Palm Jumeirah (–ø—Ä–µ–º–∏—É–º)</b> - –ø—Ä—è–º–æ–π –≤—ã—Ö–æ–¥ –∫ –≤–æ–¥–µ")
            recommendations.append("üìç <b>DIFC, Downtown</b> - —Ü–µ–Ω—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ + –∫—É–ª—å—Ç—É—Ä—ã")
            recommendations.append("üìç <b>Bluewaters</b> - –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        if priority == 'water_mornings':
            recommendations.append("üåä <b>–§–æ–∫—É—Å –Ω–∞ –≤–æ—Å—Ç–æ—á–Ω—ã–µ –≤–∏–¥—ã</b> - Palm, Marina east")
        elif priority == 'city_access':
            recommendations.append("üèôÔ∏è <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É–∑–ª—ã</b> - Metro line, Sheikh Zayed Road")
        else:  # balance
            recommendations.append("‚öñÔ∏è <b>–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞</b> - Business Bay, JLT")
        
        return recommendations[:3]
    except Exception as e:
        print(f"Error in AI recommendations: {str(e)}")
        return ["üìç <b>–ü–æ–¥–±–µ—Ä–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã</b> –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏"]

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ===

def handle_start(chat_id, user_id):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    user_sessions[user_id] = {'state': STATES['LANGUAGE_SELECT']}
    
    keyboard = create_reply_keyboard([
        ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá¨üáß English']
    ])
    
    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=keyboard)

def handle_language_select(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    if text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        session = user_sessions[user_id]
        session['language'] = 'ru'
        session['state'] = STATES['ROLE_SELECT']
        
        keyboard = create_reply_keyboard([
            ['üè† –ñ–∏—Ç—å'],
            ['üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'],
            ['üîÑ –ü—Ä–æ–¥–∞—Ç—å/–°–¥–∞—Ç—å'],
            ['üéØ –°–º–µ—à–∞–Ω–Ω—ã–π']
        ])
        
        send_message(chat_id,
            "<b>–ò–≤–∞–Ω, —Ü–∏—Ñ—Ä–æ–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –≤ —ç—Ñ–∏—Ä–µ</b>.\n\n"
            "–•–æ—á—É —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å:",
            reply_markup=keyboard)
        return True
    
    elif text == 'üá¨üáß English':
        send_message(chat_id, "English version coming soon. Use üá∑üá∫ –†—É—Å—Å–∫–∏–π for now.")
        return True
    
    return False

def handle_role_select(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    session = user_sessions[user_id]
    
    role_map = {
        'üè† –ñ–∏—Ç—å': 'live',
        'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å': 'invest',
        'üîÑ –ü—Ä–æ–¥–∞—Ç—å/–°–¥–∞—Ç—å': 'owner',
        'üéØ –°–º–µ—à–∞–Ω–Ω—ã–π': 'mixed'
    }
    
    if text not in role_map:
        return False
    
    session['role'] = role_map[text]
    
    if session['role'] == 'owner':
        send_message(chat_id, "üè† –í–µ—Ç–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.", 
                    reply_markup=create_reply_keyboard([
                        ['üè† –ñ–∏—Ç—å'], ['üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'], ['üéØ –°–º–µ—à–∞–Ω–Ω—ã–π']
                    ]))
        return True
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –±—é–¥–∂–µ—Ç–∞
    session['state'] = STATES['BUDGET_INPUT']
    
    send_message(chat_id,
        "–ö–∞–∫–æ–≤ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ –±—é–¥–∂–µ—Ç—É?\n\n"
        "<i>–õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 3-4M AED, 5–ú, 2.5 –º–∏–ª–ª–∏–æ–Ω–∞ –∏ —Ç.–¥.</i>",
        reply_markup=remove_keyboard())
    
    return True

def handle_budget_input(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    budget = validate_budget(text)
    
    if not budget:
        send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç")
        return
    
    session = user_sessions[user_id]
    session['budget'] = budget
    session['state'] = STATES['PRIORITY_SELECT']
    
    keyboard = create_reply_keyboard([
        ['üåä –£—Ç—Ä–æ —É –≤–æ–¥—ã'],
        ['üèôÔ∏è –î–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω—Ç—Ä—É'],
        ['‚öñÔ∏è –ë–∞–ª–∞–Ω—Å']
    ])
    
    send_message(chat_id,
        "–í–∞–∂–Ω–µ–µ —É—Ç—Ä–æ —É –≤–æ–¥—ã –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω—Ç—Ä—É?",
        reply_markup=keyboard)

def handle_priority_select(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    session = user_sessions[user_id]
    
    priority_map = {
        'üåä –£—Ç—Ä–æ —É –≤–æ–¥—ã': 'water_mornings',
        'üèôÔ∏è –î–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω—Ç—Ä—É': 'city_access',
        '‚öñÔ∏è –ë–∞–ª–∞–Ω—Å': 'balance'
    }
    
    if text not in priority_map:
        return False
    
    session['priority_mood'] = priority_map[text]
    session['state'] = STATES['HORIZON_SELECT']
    
    keyboard = create_reply_keyboard([
        ['1 –º–µ—Å—è—Ü', '3 –º–µ—Å—è—Ü–∞'],
        ['6 –º–µ—Å—è—Ü–µ–≤', '–±–æ–ª—å—à–µ 6']
    ])
    
    send_message(chat_id,
        "–ö–∞–∫–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –º–µ—Å—è—Ü–µ–≤ –¥–æ —Ä–µ—à–µ–Ω–∏—è?",
        reply_markup=keyboard)
    
    return True

def handle_horizon_select(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞"""
    session = user_sessions[user_id]
    
    horizon_map = {
        '1 –º–µ—Å—è—Ü': 1,
        '3 –º–µ—Å—è—Ü–∞': 3,
        '6 –º–µ—Å—è—Ü–µ–≤': 6,
        '–±–æ–ª—å—à–µ 6': 12
    }
    
    if text not in horizon_map:
        return False
    
    session['horizon_months'] = horizon_map[text]
    session['state'] = STATES['PROFILE_CONFIRM']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    show_profile_summary(chat_id, user_id)
    return True

def show_profile_summary(chat_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—è —Å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    session = user_sessions[user_id]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    profile = {
        'budget': session.get('budget', ''),
        'priority_mood': session.get('priority_mood', ''),
        'role': session.get('role', 'live')
    }
    
    recommendations = get_ai_recommendations(profile)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    role_names = {
        'live': '–ñ–∏—Ç—å',
        'invest': '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å',
        'mixed': '–°–º–µ—à–∞–Ω–Ω—ã–π'
    }
    
    priority_names = {
        'water_mornings': '–£—Ç—Ä–æ —É –≤–æ–¥—ã',
        'city_access': '–î–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω—Ç—Ä—É',
        'balance': '–ë–∞–ª–∞–Ω—Å'
    }
    
    summary = (
        f"<b>üìã –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"‚Ä¢ –¶–µ–ª—å: {role_names.get(session.get('role'), session.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n"
        f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {session.get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_names.get(session.get('priority_mood'), session.get('priority_mood', '–Ω–µ –≤—ã–±—Ä–∞–Ω'))}\n"
        f"‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç: {session.get('horizon_months', 3)} –º–µ—Å\n\n"
        f"<b>üéØ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    )
    
    for rec in recommendations:
        summary += f"{rec}\n"
    
    summary += "\n–ì–æ—Ç–æ–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"
    
    keyboard = create_reply_keyboard([
        ['‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å'],
        ['üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ']
    ])
    
    send_message(chat_id, summary, reply_markup=keyboard)

def handle_profile_confirm(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    session = user_sessions[user_id]
    
    if text == '‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å':
        session['state'] = STATES['CONTACT_CHANNEL']
        
        keyboard = create_reply_keyboard([
            ['üì± –¢–µ–ª–µ—Ñ–æ–Ω'],
            ['üìß Email'],
            ['‚úàÔ∏è Telegram']
        ])
        
        send_message(chat_id, "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è?", reply_markup=keyboard)
        return True
    
    elif text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
        session['state'] = STATES['ROLE_SELECT']
        
        keyboard = create_reply_keyboard([
            ['üè† –ñ–∏—Ç—å'],
            ['üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'],
            ['üéØ –°–º–µ—à–∞–Ω–Ω—ã–π']
        ])
        
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:", reply_markup=keyboard)
        return True
    
    return False

def handle_contact_channel(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏"""
    session = user_sessions[user_id]
    
    if text == 'üì± –¢–µ–ª–µ—Ñ–æ–Ω':
        session['contact_method'] = 'phone'
        session['state'] = STATES['PHONE_INPUT']
        send_message(chat_id, 
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<i>+9715xxxxxxx (9-15 —Ü–∏—Ñ—Ä)</i>",
            reply_markup=remove_keyboard())
    
    elif text == 'üìß Email':
        session['contact_method'] = 'email'
        session['state'] = STATES['EMAIL_INPUT']
        send_message(chat_id,
            "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
            "<i>name@mail.com</i>",
            reply_markup=remove_keyboard())
    
    elif text == '‚úàÔ∏è Telegram':
        session['contact_method'] = 'telegram'
        session['state'] = STATES['TG_INPUT']
        send_message(chat_id,
            "–í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è —Å–≤—è–∑–∏:\n"
            "<i>@username (5-32 —Å–∏–º–≤–æ–ª–æ–≤)</i>",
            reply_markup=remove_keyboard())
    else:
        return False
    
    return True

def handle_contact_input(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    session = user_sessions[user_id]
    state = session['state']
    
    if state == STATES['PHONE_INPUT']:
        if validate_phone(text):
            session['phone'] = text
            finalize_contact(chat_id, user_id)
        else:
            send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: +9715xxxxxxx")
    
    elif state == STATES['EMAIL_INPUT']:
        if validate_email(text):
            session['email'] = text
            finalize_contact(chat_id, user_id)
        else:
            send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: name@mail.com")
    
    elif state == STATES['TG_INPUT']:
        if validate_telegram(text):
            session['telegram'] = text
            finalize_contact(chat_id, user_id)
        else:
            send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: @username")

def finalize_contact(chat_id, user_id):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    session = user_sessions[user_id]
    session['state'] = STATES['CONTACT_CONFIRM']
    
    contact_info = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:\n"
    if 'phone' in session:
        contact_info += f"üì± {session['phone']}\n"
    if 'email' in session:
        contact_info += f"üìß {session['email']}\n"
    if 'telegram' in session:
        contact_info += f"‚úàÔ∏è {session['telegram']}\n"
    
    contact_info += "\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–æ–∫–µ—Ä—É?"
    
    keyboard = create_reply_keyboard([
        ['‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å'],
        ['üîÑ –ò—Å–ø—Ä–∞–≤–∏—Ç—å']
    ])
    
    send_message(chat_id, contact_info, reply_markup=keyboard)

def handle_contact_confirm(chat_id, user_id, text):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    session = user_sessions[user_id]
    
    if text == '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = {
            'user_id': user_id,
            'timestamp': datetime.now(pytz.UTC).isoformat(),
            'language': session.get('language', 'ru'),
            'role': session.get('role', ''),
            'budget': session.get('budget', ''),
            'priority_mood': session.get('priority_mood', ''),
            'horizon_months': session.get('horizon_months', 3),
            'phone': session.get('phone', ''),
            'email': session.get('email', ''),
            'telegram': session.get('telegram', ''),
            'contact_method': session.get('contact_method', '')
        }
        
        user_profiles[user_id] = profile
        session['state'] = STATES['READY']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        admin_message = (
            f"üî• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
            f"üë§ User: {user_id}\n"
            f"üéØ –¶–µ–ª—å: {profile['role']}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {profile['budget']}\n"
            f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {profile['priority_mood']}\n"
            f"üìÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç: {profile['horizon_months']} –º–µ—Å\n\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç:\n"
            f"{profile.get('phone', '')}\n"
            f"{profile.get('email', '')}\n"
            f"{profile.get('telegram', '')}"
        )
        
        send_message(ADMIN_ID, admin_message)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_message(chat_id,
            "‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
            "–ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥–∞–Ω –±—Ä–æ–∫–µ—Ä—É. –°–≤—è–∂–µ–º—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: /start",
            reply_markup=remove_keyboard())
        
        return True
    
    elif text == 'üîÑ –ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞
        session['state'] = STATES['CONTACT_CHANNEL']
        handle_contact_channel(chat_id, user_id, f"üì± –¢–µ–ª–µ—Ñ–æ–Ω")
        return True
    
    return False

# === –û–°–ù–û–í–ù–û–ô WEBHOOK ===

@app.route('/webhook', methods=['POST'])
def webhook():
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            text = message.get('text', '')
            
            print(f"Message from {user_id}: {text}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /start –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if text == '/start':
                handle_start(chat_id, user_id)
                return jsonify({'ok': True})
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            session = user_sessions.get(user_id, {})
            state = session.get('state', STATES['LANGUAGE_SELECT'])
            
            print(f"State: {state}")
            
            # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
            handled = False
            
            if state == STATES['LANGUAGE_SELECT']:
                handled = handle_language_select(chat_id, user_id, text)
            
            elif state == STATES['ROLE_SELECT']:
                handled = handle_role_select(chat_id, user_id, text)
            
            elif state == STATES['BUDGET_INPUT']:
                handle_budget_input(chat_id, user_id, text)
                handled = True
            
            elif state == STATES['PRIORITY_SELECT']:
                handled = handle_priority_select(chat_id, user_id, text)
            
            elif state == STATES['HORIZON_SELECT']:
                handled = handle_horizon_select(chat_id, user_id, text)
            
            elif state == STATES['PROFILE_CONFIRM']:
                handled = handle_profile_confirm(chat_id, user_id, text)
            
            elif state == STATES['CONTACT_CHANNEL']:
                handled = handle_contact_channel(chat_id, user_id, text)
            
            elif state in [STATES['PHONE_INPUT'], STATES['EMAIL_INPUT'], STATES['TG_INPUT']]:
                handle_contact_input(chat_id, user_id, text)
                handled = True
            
            elif state == STATES['CONTACT_CONFIRM']:
                handled = handle_contact_confirm(chat_id, user_id, text)
            
            if not handled:
                send_message(chat_id, 
                    f"–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –∏–ª–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.\n"
                    f"<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}</i>")
        
        return jsonify({'ok': True})
    
    except Exception as e:
        print(f"Webhook error: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)}), 200

@app.route('/')
def home():
    return "Telegram Bot UAE - Stage 3 Ready!"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
