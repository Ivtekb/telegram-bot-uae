import os
import json
import re
from datetime import datetime
import pytz
from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8074002738:AAGNAAHE9sdUDRl7EVwLGYYPrnZK48cxBf4"
ADMIN_ID = 367380234
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_sessions = {}
user_profiles = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATES = {
    'LANGUAGE_SELECT': 'language_select',
    'ROLE_SELECT': 'role_select',
    'BUDGET_INPUT': 'budget_input',
    'PRIORITY_SELECT': 'priority_select',
    'HORIZON_SELECT': 'horizon_select',
    'PROFILE_CONFIRM': 'profile_confirm',
    'CONTACT_CHANNEL': 'contact_channel',
    'PHONE_INPUT': 'phone_input',
    'EMAIL_INPUT': 'email_input',
    'TG_INPUT': 'tg_input',
    'CONTACT_CONFIRM': 'contact_confirm',
    'READY': 'ready'
}

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    url = f"{TELEGRAM_API_URL}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML',
        'reply_markup': json.dumps(reply_markup) if reply_markup else None
    }
    return requests.post(url, data=data)

def create_keyboard(buttons, resize=True):
    """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = []
    for row in buttons:
        keyboard.append([{'text': btn[0], 'callback_data': btn[1]} for btn in row])
    return {'inline_keyboard': keyboard, 'resize_keyboard': resize}

def validate_budget(text):
    """–°–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç"""
    return text.strip() if text.strip() else None

def validate_phone(text):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    pattern = r'^\+?\d{9,15}$'
    return re.match(pattern, text.replace(' ', '').replace('-', ''))

def validate_email(text):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
    pattern = r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    return re.match(pattern, text)

def validate_telegram(text):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username"""
    pattern = r'^@[A-Za-z0-9_]{5,32}$'
    return re.match(pattern, text)

def get_ai_recommendations(profile):
    """AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    budget = profile.get('budget', '')
    priority = profile.get('priority_mood', '')
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –±—é–¥–∂–µ—Ç—É
    if '1-2M' in budget or '2-3M' in budget:
        recommendations.append("üìç <b>JVC, Dubai Sports City</b> - –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è")
        recommendations.append("üìç <b>Dubai Marina (—Å—Ç—É–¥–∏–∏)</b> - –≥–æ—Ä–æ–¥—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è")
    elif '3-4M' in budget or '4-5M' in budget:
        recommendations.append("üìç <b>Palm Jumeirah (–≤–æ—Å—Ç–æ—á–Ω–∞—è –¥—É–≥–∞)</b> - —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç + –≤–æ–¥–∞")
        recommendations.append("üìç <b>Dubai Marina (1-2BR)</b> - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
        recommendations.append("üìç <b>Business Bay</b> - –¥–∏–Ω–∞–º–∏–∫–∞ + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
    elif '5M' in budget or '6M' in budget or '7M' in budget:
        recommendations.append("üìç <b>Palm Jumeirah (–ø—Ä–µ–º–∏—É–º)</b> - –ø—Ä—è–º–æ–π –≤—ã—Ö–æ–¥ –∫ –≤–æ–¥–µ")
        recommendations.append("üìç <b>DIFC, Downtown</b> - —Ü–µ–Ω—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ + –∫—É–ª—å—Ç—É—Ä—ã")
        recommendations.append("üìç <b>Bluewaters</b> - –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    if priority == 'water_mornings':
        recommendations.append("üåä <b>–§–æ–∫—É—Å –Ω–∞ –≤–æ—Å—Ç–æ—á–Ω—ã–µ –≤–∏–¥—ã</b> - Palm, Marina east")
    elif priority == 'city_access':
        recommendations.append("üèôÔ∏è <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É–∑–ª—ã</b> - Metro line, Sheikh Zayed Road")
    else:  # balance
        recommendations.append("‚öñÔ∏è <b>–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞</b> - Business Bay, JLT")
    
    return recommendations[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

def handle_start(chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ /start
    if user_id in user_sessions:
        del user_sessions[user_id]
    
    user_sessions[user_id] = {'state': STATES['LANGUAGE_SELECT']}
    
    keyboard = create_keyboard([
        [('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'), ('üá¨üáß English', 'lang_en')]
    ])
    
    send_message(chat_id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", 
        reply_markup=keyboard)

def handle_language_select(chat_id, user_id, data):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    if data == 'lang_ru':
        user_sessions[user_id]['language'] = 'ru'
        user_sessions[user_id]['state'] = STATES['ROLE_SELECT']
        
        keyboard = create_keyboard([
            [('üè† –ñ–∏—Ç—å', 'role_live')],
            [('üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', 'role_invest')],
            [('üîÑ –ü—Ä–æ–¥–∞—Ç—å/–°–¥–∞—Ç—å', 'role_owner')],
            [('üéØ –°–º–µ—à–∞–Ω–Ω—ã–π', 'role_mixed')]
        ])
        
        send_message(chat_id,
            "<b>–ò–≤–∞–Ω, —Ü–∏—Ñ—Ä–æ–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –≤ —ç—Ñ–∏—Ä–µ</b>.\n\n"
            "–•–æ—á—É —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å:",
            reply_markup=keyboard)

def handle_role_select(chat_id, user_id, data):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏"""
    session = user_sessions[user_id]
    
    role_map = {
        'role_live': 'live',
        'role_invest': 'invest', 
        'role_owner': 'owner',
        'role_mixed': 'mixed'
    }
    
    session['role'] = role_map.get(data, 'live')
    
    # –í–ª–∞–¥–µ–ª—å—Ü—ã –∏–¥—É—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–µ—Ç–∫–µ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –≠—Ç–∞–ø–µ 2)
    if session['role'] == 'owner':
        handle_owner_flow(chat_id, user_id)
        return
    
    # –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏/–∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –∏–¥—É—Ç –Ω–∞ —Å–±–æ—Ä –±—é–¥–∂–µ—Ç–∞
    session['state'] = STATES['BUDGET_INPUT']
    
    send_message(chat_id,
        "–ö–∞–∫–æ–≤ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ –±—é–¥–∂–µ—Ç—É?\n\n"
        "<i>–î–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3-4M AED)</i>")

def handle_budget_input(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞ - —Å–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    budget = validate_budget(text)
    
    if not budget:
        send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç")
        return
    
    session = user_sessions[user_id]
    session['budget'] = budget
    session['state'] = STATES['PRIORITY_SELECT']
    
    keyboard = create_keyboard([
        [('üåä –£—Ç—Ä–æ —É –≤–æ–¥—ã', 'priority_water')],
        [('üèôÔ∏è –î–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω—Ç—Ä—É', 'priority_city')],
        [('‚öñÔ∏è –ë–∞–ª–∞–Ω—Å', 'priority_balance')]
    ])
    
    send_message(chat_id,
        "–í–∞–∂–Ω–µ–µ —É—Ç—Ä–æ —É –≤–æ–¥—ã –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω—Ç—Ä—É?",
        reply_markup=keyboard)

def handle_priority_select(chat_id, user_id, data):
    """–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    session = user_sessions[user_id]
    
    priority_map = {
        'priority_water': 'water_mornings',
        'priority_city': 'city_access',
        'priority_balance': 'balance'
    }
    
    session['priority_mood'] = priority_map.get(data, 'balance')
    session['state'] = STATES['HORIZON_SELECT']
    
    keyboard = create_keyboard([
        [('1 –º–µ—Å—è—Ü', 'horizon_1'), ('3 –º–µ—Å—è—Ü–∞', 'horizon_3')],
        [('6 –º–µ—Å—è—Ü–µ–≤', 'horizon_6'), ('–±–æ–ª—å—à–µ 6', 'horizon_6plus')]
    ])
    
    send_message(chat_id,
        "–ö–∞–∫–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –º–µ—Å—è—Ü–µ–≤ –¥–æ —Ä–µ—à–µ–Ω–∏—è?",
        reply_markup=keyboard)

def handle_horizon_select(chat_id, user_id, data):
    """–í—ã–±–æ—Ä –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    session = user_sessions[user_id]
    
    horizon_map = {
        'horizon_1': 1,
        'horizon_3': 3,
        'horizon_6': 6,
        'horizon_6plus': 12
    }
    
    session['horizon_months'] = horizon_map.get(data, 3)
    session['state'] = STATES['PROFILE_CONFIRM']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    profile = {
        'budget': session.get('budget', ''),
        'priority_mood': session.get('priority_mood', ''),
        'role': session.get('role', '')
    }
    
    recommendations = get_ai_recommendations(profile)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    role_names = {
        'live': '–ñ–∏—Ç—å',
        'invest': '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', 
        'mixed': '–°–º–µ—à–∞–Ω–Ω—ã–π'
    }
    
    priority_names = {
        'water_mornings': '–£—Ç—Ä–æ —É –≤–æ–¥—ã',
        'city_access': '–î–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω—Ç—Ä—É',
        'balance': '–ë–∞–ª–∞–Ω—Å'
    }
    
    summary = (
        f"<b>üìã –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"‚Ä¢ –¶–µ–ª—å: {role_names.get(session['role'], session['role'])}\n"
        f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {session['budget']}\n"
        f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_names.get(session['priority_mood'], session['priority_mood'])}\n"
        f"‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç: {session['horizon_months']} –º–µ—Å\n\n"
        f"<b>üéØ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    )
    
    for rec in recommendations:
        summary += f"{rec}\n"
    
    summary += "\n–ì–æ—Ç–æ–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"
    
    keyboard = create_keyboard([
        [('‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å', 'profile_confirm')],
        [('üîÑ –ï—â—ë –≤–æ–ø—Ä–æ—Å', 'profile_edit')]
    ])
    
    send_message(chat_id, summary, reply_markup=keyboard)

def handle_profile_confirm(chat_id, user_id, data):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    session = user_sessions[user_id]
    
    if data == 'profile_confirm':
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        session['state'] = STATES['CONTACT_CHANNEL']
        
        keyboard = create_keyboard([
            [('üì± –¢–µ–ª–µ—Ñ–æ–Ω', 'contact_phone')],
            [('üìß Email', 'contact_email')],
            [('‚úàÔ∏è Telegram @–Ω–∏–∫', 'contact_tg')]
        ])
        
        send_message(chat_id,
            "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —É–¥–æ–±–Ω–µ–µ?",
            reply_markup=keyboard)
    
    elif data == 'profile_edit':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
        session['state'] = STATES['ROLE_SELECT']
        handle_role_select(chat_id, user_id, f"role_{session['role']}")

def handle_contact_channel(chat_id, user_id, data):
    """–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏"""
    session = user_sessions[user_id]
    session['contact_method'] = data.replace('contact_', '')
    
    if data == 'contact_phone':
        session['state'] = STATES['PHONE_INPUT']
        send_message(chat_id,
            "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<i>+9715xxxxxxx (9-15 —Ü–∏—Ñ—Ä)</i>")
    
    elif data == 'contact_email':
        session['state'] = STATES['EMAIL_INPUT']
        send_message(chat_id,
            "–û—Å—Ç–∞–≤—å email –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
            "<i>name@mail.com</i>")
    
    elif data == 'contact_tg':
        session['state'] = STATES['TG_INPUT']
        send_message(chat_id,
            "–ù–∞–ø–∏—à–∏ @username –¥–ª—è —Å–≤—è–∑–∏ –≤ –¢–ì:\n"
            "<i>@username (5-32 —Å–∏–º–≤–æ–ª–æ–≤)</i>")

def handle_contact_input(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    session = user_sessions[user_id]
    state = session['state']
    
    if state == STATES['PHONE_INPUT']:
        if validate_phone(text):
            session['phone'] = text
            finalize_contact(chat_id, user_id)
        else:
            send_message(chat_id,
                "–ü–æ—Ö–æ–∂–µ, —Ü–∏—Ñ—Ä –º–∞–ª–æ/–º–Ω–æ–≥–æ. –ü–æ–≤—Ç–æ—Ä–∏–º?\n"
                "<i>–§–æ—Ä–º–∞—Ç: +9715xxxxxxx</i>")
    
    elif state == STATES['EMAIL_INPUT']:
        if validate_email(text):
            session['email'] = text
            finalize_contact(chat_id, user_id)
        else:
            send_message(chat_id,
                "–§–æ—Ä–º–∞—Ç –ø–∏—Å—å–º–∞ –¥—Ä—É–≥–æ–π. –ü—Ä–∏–º–µ—Ä:\n"
                "<i>name@mail.com</i>")
    
    elif state == STATES['TG_INPUT']:
        if validate_telegram(text):
            session['telegram'] = text
            finalize_contact(chat_id, user_id)
        else:
            send_message(chat_id,
                "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç @username (5-32 —Å–∏–º–≤–æ–ª–æ–≤)")

def finalize_contact(chat_id, user_id):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    session = user_sessions[user_id]
    session['state'] = STATES['CONTACT_CONFIRM']
    
    contact_info = "–§–∏–∫—Å–∏—Ä—É—é:\n"
    if 'phone' in session:
        contact_info += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}\n"
    if 'email' in session:
        contact_info += f"üìß Email: {session['email']}\n"
    if 'telegram' in session:
        contact_info += f"‚úàÔ∏è TG: {session['telegram']}\n"
    
    contact_info += "\n–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–æ–∫–µ—Ä—É?"
    
    keyboard = create_keyboard([
        [('‚úÖ –î–∞', 'contact_send')],
        [('üìù –ò—Å–ø—Ä–∞–≤–∏—Ç—å', 'contact_edit')]
    ])
    
    send_message(chat_id, contact_info, reply_markup=keyboard)

def handle_contact_confirm(chat_id, user_id, data):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    session = user_sessions[user_id]
    
    if data == 'contact_send':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = {
            'user_id': user_id,
            'timestamp': datetime.now(pytz.UTC).isoformat(),
            'language': session.get('language', 'ru'),
            'role': session.get('role', ''),
            'budget': session.get('budget', ''),
            'priority_mood': session.get('priority_mood', ''),
            'horizon_months': session.get('horizon_months', 3),
            'phone': session.get('phone', ''),
            'email': session.get('email', ''),
            'telegram': session.get('telegram', ''),
            'contact_method': session.get('contact_method', '')
        }
        
        user_profiles[user_id] = profile
        session['state'] = STATES['READY']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message = (
            f"üî• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
            f"üë§ User ID: {user_id}\n"
            f"üéØ –¶–µ–ª—å: {profile['role']}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {profile['budget']}\n"
            f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {profile['priority_mood']}\n"
            f"üìÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç: {profile['horizon_months']} –º–µ—Å\n\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç:\n"
        )
        
        if profile['phone']:
            admin_message += f"üì± {profile['phone']}\n"
        if profile['email']:
            admin_message += f"üìß {profile['email']}\n"
        if profile['telegram']:
            admin_message += f"‚úàÔ∏è {profile['telegram']}\n"
        
        send_message(ADMIN_ID, admin_message)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_message(chat_id,
            "‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
            "–ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥–∞–Ω –±—Ä–æ–∫–µ—Ä—É. –ß–µ–ª–æ–≤–µ–∫ —Å–≤—è–∂–µ—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ.\n\n"
            "–Ø —Ä—è–¥–æ–º, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª. /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    
    elif data == 'contact_edit':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏
        session['state'] = STATES['CONTACT_CHANNEL']
        handle_contact_channel(chat_id, user_id, f"contact_{session['contact_method']}")

def handle_owner_flow(chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ç–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–∑–∞–≥–ª—É—à–∫–∞ - —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –≠—Ç–∞–ø–µ 2)"""
    send_message(chat_id,
        "üè† <b>–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>\n\n"
        "–≠—Ç–∞ –≤–µ—Ç–∫–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –≠—Ç–∞–ø–µ 2.\n"
        "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.")

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        print(f"Received data: {data}")  # –û—Ç–ª–∞–¥–∫–∞
        
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            text = message.get('text', '')
            
            # –ö–æ–º–∞–Ω–¥–∞ /start
            if text == '/start':
                handle_start(chat_id, user_id)
                return jsonify({'ok': True})
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if text.startswith('/') and user_id not in user_sessions:
                handle_start(chat_id, user_id)
                return jsonify({'ok': True})
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = user_sessions.get(user_id, {})
            state = session.get('state', STATES['LANGUAGE_SELECT'])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
            if state == STATES['BUDGET_INPUT']:
                handle_budget_input(chat_id, user_id, text)
            elif state in [STATES['PHONE_INPUT'], STATES['EMAIL_INPUT'], STATES['TG_INPUT']]:
                handle_contact_input(chat_id, user_id, text)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ä—Ç
                if user_id not in user_sessions:
                    send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                    send_message(chat_id, f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –∏–ª–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        
        elif 'callback_query' in data:
            query = data['callback_query']
            chat_id = query['message']['chat']['id']
            user_id = query['from']['id']
            callback_data = query['data']
            
            print(f"Callback: user_id={user_id}, data={callback_data}")  # –û—Ç–ª–∞–¥–∫–∞
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ä—Ç
            if user_id not in user_sessions:
                send_message(chat_id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return jsonify({'ok': True})
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = user_sessions[user_id]
            state = session.get('state', STATES['LANGUAGE_SELECT'])
            
            print(f"Current state: {state}")  # –û—Ç–ª–∞–¥–∫–∞
            
            # –†–æ—É—Ç–∏–Ω–≥ –ø–æ callback_data (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è)
            if callback_data.startswith('lang_'):
                handle_language_select(chat_id, user_id, callback_data)
            elif callback_data.startswith('role_'):
                handle_role_select(chat_id, user_id, callback_data)
            elif callback_data.startswith('priority_'):
                handle_priority_select(chat_id, user_id, callback_data)
            elif callback_data.startswith('horizon_'):
                handle_horizon_select(chat_id, user_id, callback_data)
            elif callback_data.startswith('profile_'):
                handle_profile_confirm(chat_id, user_id, callback_data)
            elif callback_data.startswith('contact_'):
                if state == STATES['CONTACT_CHANNEL']:
                    handle_contact_channel(chat_id, user_id, callback_data)
                elif state == STATES['CONTACT_CONFIRM']:
                    handle_contact_confirm(chat_id, user_id, callback_data)
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
                send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        
        return jsonify({'ok': True})
    
    except Exception as e:
        print(f"Error in webhook: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/')
def home():
    return "Telegram Bot UAE - Stage 3 Ready!"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
